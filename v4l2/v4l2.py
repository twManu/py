#!/usr/bin/python

import fcntl, os, sys, struct

#
# define ioctl 
VIDIOC_QUERYBUF = 0xc0585609
VIDIOC_REQBUFS = 0xc0145608
VIDIOC_QUERYCAP = 0x80685600
VIDIOC_G_PARM = 0xc0cc5615
VIDIOC_S_PARM = 0xc0cc5616
VIDIOC_ENUM_FMT = 0xc0405602
VIDIOC_S_FMT = 0xc0d05605
VIDIOC_ENUM_FRAMESIZES = 0xc02c564a
'''
struct v4l2_capability {
	__u8	driver[16];
	__u8	card[32];
	__u8	bus_info[32];
	__u32   version;
	__u32	capabilities;
	__u32	device_caps;
	__u32	reserved[3];
};
'''

g_ioctl = {
	  'VIDIOC_QUERYBUF': VIDIOC_QUERYBUF
	, 'VIDIOC_REQBUFS': VIDIOC_REQBUFS
	, 'VIDIOC_QUERYCAP': (
                VIDIOC_QUERYCAP
                , '16s32s32sIII3I'
        )
	, 'VIDIOC_G_PARM': VIDIOC_G_PARM
	, 'VIDIOC_S_PARM': VIDIOC_S_PARM
	, 'VIDIOC_ENUM_FMT': VIDIOC_ENUM_FMT
	, 'VIDIOC_S_FMT': VIDIOC_S_FMT
	, 'VIDIOC_ENUM_FRAMESIZES': VIDIOC_ENUM_FRAMESIZES
}

#
# define PIX_FMT
V4L2_PIX_FMT_RGB332 = 0x31424752
V4L2_PIX_FMT_RGB444 = 0x34343452
V4L2_PIX_FMT_RGB555 = 0x4f424752
V4L2_PIX_FMT_RGB565 = 0x50424752
V4L2_PIX_FMT_RGB555X = 0x51424752
V4L2_PIX_FMT_RGB565X = 0x52424752
V4L2_PIX_FMT_BGR666 = 0x48524742
V4L2_PIX_FMT_BGR24 = 0x33524742
V4L2_PIX_FMT_RGB24 = 0x33424752
V4L2_PIX_FMT_BGR32 = 0x34524742
V4L2_PIX_FMT_RGB32 = 0x34424752
V4L2_PIX_FMT_GREY = 0x59455247
V4L2_PIX_FMT_Y4 = 0x20343059
V4L2_PIX_FMT_Y6 = 0x20363059
V4L2_PIX_FMT_Y10 = 0x20303159
V4L2_PIX_FMT_Y12 = 0x20323159
V4L2_PIX_FMT_Y16 = 0x20363159
V4L2_PIX_FMT_Y10BPACK = 0x42303159
V4L2_PIX_FMT_PAL8 = 0x384c4150
V4L2_PIX_FMT_UV8 = 0x20385655
V4L2_PIX_FMT_YVU410 = 0x39555659
V4L2_PIX_FMT_YVU420 = 0x32315659
V4L2_PIX_FMT_YUYV = 0x56595559
V4L2_PIX_FMT_YYUV = 0x56555959
V4L2_PIX_FMT_YVYU = 0x55595659
V4L2_PIX_FMT_UYVY = 0x59565955
V4L2_PIX_FMT_VYUY = 0x59555956
V4L2_PIX_FMT_YUV422P = 0x50323234
V4L2_PIX_FMT_YUV411P = 0x50313134
V4L2_PIX_FMT_Y41P = 0x50313459
V4L2_PIX_FMT_YUV444 = 0x34343459
V4L2_PIX_FMT_YUV555 = 0x4f565559
V4L2_PIX_FMT_YUV565 = 0x50565559
V4L2_PIX_FMT_YUV32 = 0x34565559
V4L2_PIX_FMT_YUV410 = 0x39565559
V4L2_PIX_FMT_YUV420 = 0x32315559
V4L2_PIX_FMT_HI240 = 0x34324948
V4L2_PIX_FMT_HM12 = 0x32314d48
V4L2_PIX_FMT_M420 = 0x3032344d
V4L2_PIX_FMT_NV12 = 0x3231564e
V4L2_PIX_FMT_NV21 = 0x3132564e
V4L2_PIX_FMT_NV16 = 0x3631564e
V4L2_PIX_FMT_NV61 = 0x3136564e
V4L2_PIX_FMT_NV24 = 0x3432564e
V4L2_PIX_FMT_NV42 = 0x3234564e
V4L2_PIX_FMT_NV12M = 0x32314d4e
V4L2_PIX_FMT_NV21M = 0x31324d4e
V4L2_PIX_FMT_NV12MT_16X16 = 0x32314d56
V4L2_PIX_FMT_YUV420M = 0x32314d59
V4L2_PIX_FMT_YVU420M = 0x31324d59
V4L2_PIX_FMT_SBGGR8 = 0x31384142
V4L2_PIX_FMT_SGBRG8 = 0x47524247
V4L2_PIX_FMT_SGRBG8 = 0x47425247
V4L2_PIX_FMT_SRGGB8 = 0x42474752
V4L2_PIX_FMT_SBGGR10 = 0x30314742
V4L2_PIX_FMT_SGBRG10 = 0x30314247
V4L2_PIX_FMT_SGRBG10 = 0x30314142
V4L2_PIX_FMT_SRGGB10 = 0x30314752
V4L2_PIX_FMT_SBGGR12 = 0x32314742
V4L2_PIX_FMT_SGBRG12 = 0x32314247
V4L2_PIX_FMT_SGRBG12 = 0x32314142
V4L2_PIX_FMT_SRGGB12 = 0x32314752
V4L2_PIX_FMT_SBGGR10ALAW8 = 0x38414261
V4L2_PIX_FMT_SGBRG10ALAW8 = 0x38414761
V4L2_PIX_FMT_SGRBG10ALAW8 = 0x38416761
V4L2_PIX_FMT_SRGGB10ALAW8 = 0x38415261
V4L2_PIX_FMT_SBGGR10DPCM8 = 0x38414262
V4L2_PIX_FMT_SGBRG10DPCM8 = 0x38414762
V4L2_PIX_FMT_SGRBG10DPCM8 = 0x30314442
V4L2_PIX_FMT_SRGGB10DPCM8 = 0x38415262
V4L2_PIX_FMT_SBGGR16 = 0x32525942
V4L2_PIX_FMT_MJPEG = 0x47504a4d
V4L2_PIX_FMT_NV16M = 0x36314d4e
V4L2_PIX_FMT_NV61M = 0x31364d4e
V4L2_PIX_FMT_NV12MT = 0x32314d54
V4L2_PIX_FMT_JPEG = 0x4745504a
V4L2_PIX_FMT_DV = 0x64737664
V4L2_PIX_FMT_MPEG = 0x4745504d
V4L2_PIX_FMT_H264 = 0x34363248
V4L2_PIX_FMT_H264_NO_SC = 0x31435641
V4L2_PIX_FMT_H264_MVC = 0x3436324d
V4L2_PIX_FMT_H263 = 0x33363248
V4L2_PIX_FMT_MPEG1 = 0x3147504d
V4L2_PIX_FMT_MPEG2 = 0x3247504d
V4L2_PIX_FMT_MPEG4 = 0x3447504d
V4L2_PIX_FMT_XVID = 0x44495658
V4L2_PIX_FMT_VC1_ANNEX_G = 0x47314356
V4L2_PIX_FMT_VC1_ANNEX_L = 0x4c314356
V4L2_PIX_FMT_VP8 = 0x30385056
V4L2_PIX_FMT_CPIA1 = 0x41495043
V4L2_PIX_FMT_WNVA = 0x41564e57
V4L2_PIX_FMT_SN9C10X = 0x30313953
V4L2_PIX_FMT_SN9C20X_I420 = 0x30323953
V4L2_PIX_FMT_PWC1 = 0x31435750
V4L2_PIX_FMT_PWC2 = 0x32435750
V4L2_PIX_FMT_ET61X251 = 0x35323645
V4L2_PIX_FMT_SPCA501 = 0x31303553
V4L2_PIX_FMT_SPCA505 = 0x35303553
V4L2_PIX_FMT_SPCA508 = 0x38303553
V4L2_PIX_FMT_SPCA561 = 0x31363553
V4L2_PIX_FMT_PAC207 = 0x37303250
V4L2_PIX_FMT_MR97310A = 0x3031334d
V4L2_PIX_FMT_JL2005BCD = 0x30324c4a
V4L2_PIX_FMT_SN9C2028 = 0x584e4f53
V4L2_PIX_FMT_SQ905C = 0x43353039
V4L2_PIX_FMT_PJPG = 0x47504a50
V4L2_PIX_FMT_OV511 = 0x3131354f
V4L2_PIX_FMT_OV518 = 0x3831354f
V4L2_PIX_FMT_STV0680 = 0x30383653
V4L2_PIX_FMT_TM6000 = 0x30364d54
V4L2_PIX_FMT_CIT_YYVYUY = 0x56544943
V4L2_PIX_FMT_KONICA420 = 0x494e4f4b
V4L2_PIX_FMT_JPGL = 0x4c47504a
V4L2_PIX_FMT_SE401 = 0x31303453
V4L2_PIX_FMT_S5C_UYVY_JPG = 0x49433553
g_pix_fmt = {
	  'V4L2_PIX_FMT_RGB332': V4L2_PIX_FMT_RGB332
	, 'V4L2_PIX_FMT_RGB444': V4L2_PIX_FMT_RGB444
	, 'V4L2_PIX_FMT_RGB555': V4L2_PIX_FMT_RGB555
	, 'V4L2_PIX_FMT_RGB565': V4L2_PIX_FMT_RGB565
	, 'V4L2_PIX_FMT_RGB555X': V4L2_PIX_FMT_RGB555X
	, 'V4L2_PIX_FMT_RGB565X': V4L2_PIX_FMT_RGB565X
	, 'V4L2_PIX_FMT_BGR666': V4L2_PIX_FMT_BGR666
	, 'V4L2_PIX_FMT_BGR24': V4L2_PIX_FMT_BGR24
	, 'V4L2_PIX_FMT_RGB24': V4L2_PIX_FMT_RGB24
	, 'V4L2_PIX_FMT_BGR32': V4L2_PIX_FMT_BGR32
	, 'V4L2_PIX_FMT_RGB32': V4L2_PIX_FMT_RGB32
	, 'V4L2_PIX_FMT_GREY': V4L2_PIX_FMT_GREY
	, 'V4L2_PIX_FMT_Y4': V4L2_PIX_FMT_Y4
	, 'V4L2_PIX_FMT_Y6': V4L2_PIX_FMT_Y6
	, 'V4L2_PIX_FMT_Y10': V4L2_PIX_FMT_Y10
	, 'V4L2_PIX_FMT_Y12': V4L2_PIX_FMT_Y12
	, 'V4L2_PIX_FMT_Y16': V4L2_PIX_FMT_Y16
	, 'V4L2_PIX_FMT_Y10BPACK': V4L2_PIX_FMT_Y10BPACK
	, 'V4L2_PIX_FMT_PAL8': V4L2_PIX_FMT_PAL8
	, 'V4L2_PIX_FMT_UV8': V4L2_PIX_FMT_UV8
	, 'V4L2_PIX_FMT_YVU410': V4L2_PIX_FMT_YVU410
	, 'V4L2_PIX_FMT_YVU420': V4L2_PIX_FMT_YVU420
	, 'V4L2_PIX_FMT_YUYV': V4L2_PIX_FMT_YUYV
	, 'V4L2_PIX_FMT_YYUV': V4L2_PIX_FMT_YYUV
	, 'V4L2_PIX_FMT_YVYU': V4L2_PIX_FMT_YVYU
	, 'V4L2_PIX_FMT_UYVY': V4L2_PIX_FMT_UYVY
	, 'V4L2_PIX_FMT_VYUY': V4L2_PIX_FMT_VYUY
	, 'V4L2_PIX_FMT_YUV422P': V4L2_PIX_FMT_YUV422P
	, 'V4L2_PIX_FMT_YUV411P': V4L2_PIX_FMT_YUV411P
	, 'V4L2_PIX_FMT_Y41P': V4L2_PIX_FMT_Y41P
	, 'V4L2_PIX_FMT_YUV444': V4L2_PIX_FMT_YUV444
	, 'V4L2_PIX_FMT_YUV555': V4L2_PIX_FMT_YUV555
	, 'V4L2_PIX_FMT_YUV565': V4L2_PIX_FMT_YUV565
	, 'V4L2_PIX_FMT_YUV32': V4L2_PIX_FMT_YUV32
	, 'V4L2_PIX_FMT_YUV410': V4L2_PIX_FMT_YUV410
	, 'V4L2_PIX_FMT_YUV420': V4L2_PIX_FMT_YUV420
	, 'V4L2_PIX_FMT_HI240': V4L2_PIX_FMT_HI240
	, 'V4L2_PIX_FMT_HM12': V4L2_PIX_FMT_HM12
	, 'V4L2_PIX_FMT_M420': V4L2_PIX_FMT_M420
	, 'V4L2_PIX_FMT_NV12': V4L2_PIX_FMT_NV12
	, 'V4L2_PIX_FMT_NV21': V4L2_PIX_FMT_NV21
	, 'V4L2_PIX_FMT_NV16': V4L2_PIX_FMT_NV16
	, 'V4L2_PIX_FMT_NV61': V4L2_PIX_FMT_NV61
	, 'V4L2_PIX_FMT_NV24': V4L2_PIX_FMT_NV24
	, 'V4L2_PIX_FMT_NV42': V4L2_PIX_FMT_NV42
	, 'V4L2_PIX_FMT_NV12M': V4L2_PIX_FMT_NV12M
	, 'V4L2_PIX_FMT_NV21M': V4L2_PIX_FMT_NV21M
	, 'V4L2_PIX_FMT_NV12MT_16X16': V4L2_PIX_FMT_NV12MT_16X16
	, 'V4L2_PIX_FMT_YUV420M': V4L2_PIX_FMT_YUV420M
	, 'V4L2_PIX_FMT_YVU420M': V4L2_PIX_FMT_YVU420M
	, 'V4L2_PIX_FMT_SBGGR8': V4L2_PIX_FMT_SBGGR8
	, 'V4L2_PIX_FMT_SGBRG8': V4L2_PIX_FMT_SGBRG8
	, 'V4L2_PIX_FMT_SGRBG8': V4L2_PIX_FMT_SGRBG8
	, 'V4L2_PIX_FMT_SRGGB8': V4L2_PIX_FMT_SRGGB8
	, 'V4L2_PIX_FMT_SBGGR10': V4L2_PIX_FMT_SBGGR10
	, 'V4L2_PIX_FMT_SGBRG10': V4L2_PIX_FMT_SGBRG10
	, 'V4L2_PIX_FMT_SGRBG10': V4L2_PIX_FMT_SGRBG10
	, 'V4L2_PIX_FMT_SRGGB10': V4L2_PIX_FMT_SRGGB10
	, 'V4L2_PIX_FMT_SBGGR12': V4L2_PIX_FMT_SBGGR12
	, 'V4L2_PIX_FMT_SGBRG12': V4L2_PIX_FMT_SGBRG12
	, 'V4L2_PIX_FMT_SGRBG12': V4L2_PIX_FMT_SGRBG12
	, 'V4L2_PIX_FMT_SRGGB12': V4L2_PIX_FMT_SRGGB12
	, 'V4L2_PIX_FMT_SBGGR10ALAW8': V4L2_PIX_FMT_SBGGR10ALAW8
	, 'V4L2_PIX_FMT_SGBRG10ALAW8': V4L2_PIX_FMT_SGBRG10ALAW8
	, 'V4L2_PIX_FMT_SGRBG10ALAW8': V4L2_PIX_FMT_SGRBG10ALAW8
	, 'V4L2_PIX_FMT_SRGGB10ALAW8': V4L2_PIX_FMT_SRGGB10ALAW8
	, 'V4L2_PIX_FMT_SBGGR10DPCM8': V4L2_PIX_FMT_SBGGR10DPCM8
	, 'V4L2_PIX_FMT_SGBRG10DPCM8': V4L2_PIX_FMT_SGBRG10DPCM8
	, 'V4L2_PIX_FMT_SGRBG10DPCM8': V4L2_PIX_FMT_SGRBG10DPCM8
	, 'V4L2_PIX_FMT_SRGGB10DPCM8': V4L2_PIX_FMT_SRGGB10DPCM8
	, 'V4L2_PIX_FMT_SBGGR16': V4L2_PIX_FMT_SBGGR16
	, 'V4L2_PIX_FMT_MJPEG': V4L2_PIX_FMT_MJPEG
	, 'V4L2_PIX_FMT_NV16M': V4L2_PIX_FMT_NV16M
	, 'V4L2_PIX_FMT_NV61M': V4L2_PIX_FMT_NV61M
	, 'V4L2_PIX_FMT_NV12MT': V4L2_PIX_FMT_NV12MT
	, 'V4L2_PIX_FMT_JPEG': V4L2_PIX_FMT_JPEG
	, 'V4L2_PIX_FMT_DV': V4L2_PIX_FMT_DV
	, 'V4L2_PIX_FMT_MPEG': V4L2_PIX_FMT_MPEG
	, 'V4L2_PIX_FMT_H264': V4L2_PIX_FMT_H264
	, 'V4L2_PIX_FMT_H264_NO_SC': V4L2_PIX_FMT_H264_NO_SC
	, 'V4L2_PIX_FMT_H264_MVC': V4L2_PIX_FMT_H264_MVC
	, 'V4L2_PIX_FMT_H263': V4L2_PIX_FMT_H263
	, 'V4L2_PIX_FMT_MPEG1': V4L2_PIX_FMT_MPEG1
	, 'V4L2_PIX_FMT_MPEG2': V4L2_PIX_FMT_MPEG2
	, 'V4L2_PIX_FMT_MPEG4': V4L2_PIX_FMT_MPEG4
	, 'V4L2_PIX_FMT_XVID': V4L2_PIX_FMT_XVID
	, 'V4L2_PIX_FMT_VC1_ANNEX_G': V4L2_PIX_FMT_VC1_ANNEX_G
	, 'V4L2_PIX_FMT_VC1_ANNEX_L': V4L2_PIX_FMT_VC1_ANNEX_L
	, 'V4L2_PIX_FMT_VP8': V4L2_PIX_FMT_VP8
	, 'V4L2_PIX_FMT_CPIA1': V4L2_PIX_FMT_CPIA1
	, 'V4L2_PIX_FMT_WNVA': V4L2_PIX_FMT_WNVA
	, 'V4L2_PIX_FMT_SN9C10X': V4L2_PIX_FMT_SN9C10X
	, 'V4L2_PIX_FMT_SN9C20X_I420': V4L2_PIX_FMT_SN9C20X_I420
	, 'V4L2_PIX_FMT_PWC1': V4L2_PIX_FMT_PWC1
	, 'V4L2_PIX_FMT_PWC2': V4L2_PIX_FMT_PWC2
	, 'V4L2_PIX_FMT_ET61X251': V4L2_PIX_FMT_ET61X251
	, 'V4L2_PIX_FMT_SPCA501': V4L2_PIX_FMT_SPCA501
	, 'V4L2_PIX_FMT_SPCA505': V4L2_PIX_FMT_SPCA505
	, 'V4L2_PIX_FMT_SPCA508': V4L2_PIX_FMT_SPCA508
	, 'V4L2_PIX_FMT_SPCA561': V4L2_PIX_FMT_SPCA561
	, 'V4L2_PIX_FMT_PAC207': V4L2_PIX_FMT_PAC207
	, 'V4L2_PIX_FMT_MR97310A': V4L2_PIX_FMT_MR97310A
	, 'V4L2_PIX_FMT_JL2005BCD': V4L2_PIX_FMT_JL2005BCD
	, 'V4L2_PIX_FMT_SN9C2028': V4L2_PIX_FMT_SN9C2028
	, 'V4L2_PIX_FMT_SQ905C': V4L2_PIX_FMT_SQ905C
	, 'V4L2_PIX_FMT_PJPG': V4L2_PIX_FMT_PJPG
	, 'V4L2_PIX_FMT_OV511': V4L2_PIX_FMT_OV511
	, 'V4L2_PIX_FMT_OV518': V4L2_PIX_FMT_OV518
	, 'V4L2_PIX_FMT_STV0680': V4L2_PIX_FMT_STV0680
	, 'V4L2_PIX_FMT_TM6000': V4L2_PIX_FMT_TM6000
	, 'V4L2_PIX_FMT_CIT_YYVYUY': V4L2_PIX_FMT_CIT_YYVYUY
	, 'V4L2_PIX_FMT_KONICA420': V4L2_PIX_FMT_KONICA420
	, 'V4L2_PIX_FMT_JPGL': V4L2_PIX_FMT_JPGL
	, 'V4L2_PIX_FMT_SE401': V4L2_PIX_FMT_SE401
	, 'V4L2_PIX_FMT_S5C_UYVY_JPG': V4L2_PIX_FMT_S5C_UYVY_JPG
        
}

#
# capability
V4L2_CAP_VIDEO_CAPTURE = 0x00000001
V4L2_CAP_VIDEO_OUTPUT = 0x00000002
V4L2_CAP_VIDEO_OVERLAY = 0x00000004
V4L2_CAP_VBI_CAPTURE = 0x00000010
V4L2_CAP_VBI_OUTPUT = 0x00000020
V4L2_CAP_SLICED_VBI_CAPTURE = 0x00000040
V4L2_CAP_SLICED_VBI_OUTPUT = 0x00000080
V4L2_CAP_RDS_CAPTURE = 0x00000100
V4L2_CAP_VIDEO_OUTPUT_OVERLAY = 0x00000200
V4L2_CAP_HW_FREQ_SEEK = 0x00000400
V4L2_CAP_RDS_OUTPUT = 0x00000800
V4L2_CAP_VIDEO_CAPTURE_MPLANE = 0x00001000
V4L2_CAP_VIDEO_OUTPUT_MPLANE = 0x00002000
V4L2_CAP_VIDEO_M2M_MPLANE = 0x00004000
V4L2_CAP_VIDEO_M2M = 0x00008000
V4L2_CAP_TUNER = 0x00010000
V4L2_CAP_AUDIO = 0x00020000
V4L2_CAP_RADIO = 0x00040000
V4L2_CAP_MODULATOR = 0x00080000
V4L2_CAP_READWRITE = 0x01000000
V4L2_CAP_ASYNCIO = 0x02000000
V4L2_CAP_STREAMING = 0x04000000
V4L2_CAP_DEVICE_CAPS = 0x80000000
g_cap = {
          'V4L2_CAP_VIDEO_CAPTURE': V4L2_CAP_VIDEO_CAPTURE
        , 'V4L2_CAP_VIDEO_OUTPUT': V4L2_CAP_VIDEO_OUTPUT
        , 'V4L2_CAP_VIDEO_OVERLAY': V4L2_CAP_VIDEO_OVERLAY
        , 'V4L2_CAP_VBI_CAPTURE': V4L2_CAP_VBI_CAPTURE
        , 'V4L2_CAP_VBI_OUTPUT': V4L2_CAP_VBI_OUTPUT
        , 'V4L2_CAP_SLICED_VBI_CAPTURE': V4L2_CAP_SLICED_VBI_CAPTURE
        , 'V4L2_CAP_SLICED_VBI_OUTPUT': V4L2_CAP_SLICED_VBI_OUTPUT
        , 'V4L2_CAP_RDS_CAPTURE': V4L2_CAP_RDS_CAPTURE
        , 'V4L2_CAP_VIDEO_OUTPUT_OVERLAY': V4L2_CAP_VIDEO_OUTPUT_OVERLAY
        , 'V4L2_CAP_HW_FREQ_SEEK': V4L2_CAP_HW_FREQ_SEEK
        , 'V4L2_CAP_RDS_OUTPUT': V4L2_CAP_RDS_OUTPUT
        , 'V4L2_CAP_VIDEO_CAPTURE_MPLANE': V4L2_CAP_VIDEO_CAPTURE_MPLANE
        , 'V4L2_CAP_VIDEO_OUTPUT_MPLANE': V4L2_CAP_VIDEO_OUTPUT_MPLANE
        , 'V4L2_CAP_VIDEO_M2M_MPLANE': V4L2_CAP_VIDEO_M2M_MPLANE
        , 'V4L2_CAP_VIDEO_M2M': V4L2_CAP_VIDEO_M2M
        , 'V4L2_CAP_TUNER': V4L2_CAP_TUNER
        , 'V4L2_CAP_AUDIO': V4L2_CAP_AUDIO
        , 'V4L2_CAP_RADIO': V4L2_CAP_RADIO
        , 'V4L2_CAP_MODULATOR': V4L2_CAP_MODULATOR
        , 'V4L2_CAP_READWRITE': V4L2_CAP_READWRITE
        , 'V4L2_CAP_ASYNCIO': V4L2_CAP_ASYNCIO
        , 'V4L2_CAP_STREAMING': V4L2_CAP_STREAMING
        , 'V4L2_CAP_DEVICE_CAPS': V4L2_CAP_DEVICE_CAPS
}


class video:
        #init device
        def __init__(self, node='video0'):
                self._fd = None
                self._path='/dev/'+node
                self._cap = None
                #exist?
                if not os.path.exists(self._path):
                        print 'Missing '+self._path
                        self._path = None
                        return
                #can open?
                try:
                        self._fd = open(self._path, "wb")
                        print self._path + " open successful"
                except:
                        print 'Fail to open '+self._path
                        self._fd = None
                        self._path = None


        # In  : show - to show info or not
        # Ret : capability unpacked
        def querycap(self, show=False):
                if not self._fd:
                        return None
                if not self._cap:
                        cap = struct.pack(g_ioctl['VIDIOC_QUERYCAP'][1], '', '', '', 0, 0, 0, 0, 0, 0)
                        try:
                                cap = fcntl.ioctl(self._fd, VIDIOC_QUERYCAP, cap)
                                self._cap = struct.unpack(g_ioctl['VIDIOC_QUERYCAP'][1], cap)
                                if not show:
                                        print 'VIDIOC_QUERYCAP successful'
                                else:
                                        print self._cap[1]+':'
                                        print '\tbacked by ' + self._cap[0],
                                        print '@ '+self._cap[2]
                                        #capabilities
                                        if self._cap[4]:
                                                print 'Capabilities:'
                                                for key in g_cap:
                                                        if self._cap[4] & g_cap[key]:
                                                                print '\t'+key
                                
                        except:
                                print "failure"
                                return None
                return self._cap


        def __exit__(self):
                if self._fd:
                        print "Exit "+self._path
                        close(self._fd)
                        self._fd = None

        def __close__(self):
                if self._fd:
                        print "Closing "+self._path
                        close(self._fd)
                        self._fd = None



#main
if __name__ == '__main__':
        dev = video('video0')
        dev.querycap(True)
